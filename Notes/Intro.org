* Prologue: How to Program
/Bad programming is easy. Even Dummies can learn it in 21 days./

** Foreword

*** How the Second Edition Differs from the First
    - In particular, this edition focuses on two kinds of programs:
      interactive, reactive (graphical) programs and so-called batch
      programs.
    - 

** Prologue
   - What the book is not about Many early books on programming and
     even some of today’s books teach you a lot about the authors’
     favorite application discipline for programming: mathematics,
     physics, music, accounting, and so on. To some extent that is
     natural, because programming is useful in those areas. Then
     again, it forces you to know a lot (or at least something) about
     those disciplines. This book really focuses on programming and
     problem solving and what computer science can teach you in this
     regard. We have made every attempt to minimize the use of
     knowledge from other areas; for those few occasions when we went
     too far, we apologize.
   - Let’s summarize again. To program is to write down an arithmetic
     expression, but you’re no longer restricted to boring numbers.
   - Indeed, programs are functions, and once you understand functions
     well, you know almost everything there is about programming.
   - ~(define (FunctionName InputName) BodyExpression)~
   - You can launch a function by hand on a few select inputs to
     ensure it produces the proper outputs. This is called testing a
     function.
   - In the ideal program, a small request, such as changing the sizes
     of the canvas, should require an equally small change.
   - In modern parlance, you have just experienced your first program
     refactoring. Every time you re-organize your program to prepare
     yourself for likely future change requests, you refactor your
     program.
   - As you read on, keep in mind that real programs consists of
     50,000 or 500,000 or 5,000,000 lines of code.
   - The answer is that for constant definitions, the order matters,
     and for function definitions it doesn’t. As soon as DrRacket
     encounters a constant definition, it determines the value of the
     expression and then associates the name with this value.
   - Better than pondering is doing. It’s the only way to learn. So
     don’t let us stop you. Just do it.
   - It is about reading problem statements, extracting the important
     concepts. It is about figuring out what is really wanted. It is
     about exploring examples to strengthen your intuitive
     understanding of the problem. It is about organizing knowledge
     and it is about knowing what you don’t know yet. It is about
     filling those last few gaps. It is about making sure that you
     know how and why your code works, and that you and your readers
     will do so in the future. In short, it is really about solving
     problems systematically. 
