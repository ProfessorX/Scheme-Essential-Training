# This is the "e-notebook" for Racket Guide. 
# Collected and summarized by Abraham Xiao. Original copyrights belong
# to Matthew Flatt and PLT team. For this document, refer to the
# repository LICENSE.
* The Racket Guide

** Racket Essentials
   - Under the hood, a function definition is really the same as a
     non-function definition, and a function name does not have to be
     used in a function call. A function is just another kind of
     value, though the printed form is necessarily less complete than
     the printed form of a number or string.
   - A function definition can include multiple expressions for the
     function’s body. In that case, only the value of the last
     expression is returned when the function is called.
   - For function calls, the first <expr> can be anything that
     evaluates to a function. For example, it can be a conditional
     expression.
   - In Racket, you can use a lambda expression to produce a function
     directly. The lambda form is followed by identifiers for the
     function’s arguments, and then the function’s body expressions.
   - The body of a Racket iteration is packaged into a function to be
     applied to each element, so the lambda form becomes particularly
     handy in combination with iteration functions.
   - The cons function actually accepts any two values, not just a
     list for the second argument. When the second argument is not
     empty and not itself produced by cons, the result prints in a
     special way. The two values joined with cons are printed between
     parentheses, but with a dot (i.e., a period surrounded by
     whitespace) in between
   - In the same way that parenthesized output should not be confused
     with expressions, a printed symbol should not be confused with
     an identifier. In particular, the symbol (quote map) has nothing
     to do with the map identifier or the predefined function that is
     bound to map, except that the symbol and the identifier happen
     to be made up of the same letters.
   - The syntax of Racket is not defined directly in terms of
     character streams. Instead, the syntax is determined by two
     layers:
     - a reader layer, which turns a sequence of characters into
       lists, symbols, and other constants
     - an expander layer, which processes the lists, symbols, and
       other constants to parse them as an expression.



** Built-In Datatypes
   - Racket has two distinguished constants to represent boolean
     values: #t for true and #f for false. Uppercase #T and #F are
     parsed as the same values, but the lowercase forms are
     preferred.
   - Inexact numbers print with a decimal point or exponent specifier,
     and exact numbers print as integers and fractions. The same
     conventions apply for reading number constants, but #e or #i can
     prefix a number to force its parsing as an exact or inexact
     number. The prefixes #b, #o, and #x specify binary, octal, and
     hexadecimal interpretation of digits.
   - The = procedure compares numbers for numerical equality. If it is
     given both inexact and exact numbers to compare, it essentially
     converts the inexact numbers to exact before com- paring. The
     eqv? (and therefore equal?) procedure, in contrast, compares
     numbers considering both exactness and numerical equality.
   - Beware of comparisons involving inexact numbers, which by their
     nature can have surprising behavior. Even apparently simple
     inexact numbers may not mean what you think they mean; for
     example, while a base-2 IEEE floating-point number can represent
     1/2 exactly, it can only approximate 1/10.
   - A printable character normally prints as #\ followed by the
     represented character. An un- printable character normally prints
     as #\u followed by the scalar value as hexadecimal num- ber. A
     few characters are printed specially; for example, the space and
     linefeed characters print as #\space and #\newline,
     respectively.
   - A string can be mutable or immutable; strings written directly as
     expressions are immutable, but most other strings are
     mutable. The make-string procedure creates a mutable string given
     a length and optional fill character. The string-ref procedure
     accesses a character from a string (with 0-based indexing); the
     string-set! procedure changes a character in a mutable string.
   - For any sequence of characters, exactly one corresponding symbol
     is interned; calling the string->symbol procedure, or reading a
     syntactic identifier, produces an interned symbol. Since interned
     symbols can be cheaply compared with eq? (and thus eqv? or
     equal?), they serve as a convenient values to use for tags and
     enumerations.
   - Actually, # is disallowed only at the beginning of a symbol, and
     then only if not followed by %; otherwise, # is allowed,
     too. Also, . by itself is not a symbol.
   - Keywords are intended for use (unquoted) as special markers in
     argument lists and in certain syntactic forms. For run-time flags
     and enumerations, use symbols instead of keywords.
   - A pair joins two arbitrary values. The cons procedure constructs
     pairs, and the car and cdr procedures extract the first and
     second elements of the pair, respectively. The pair? predicate
     recognizes pairs.
   - A list is a combination of pairs that creates a linked list. More
     precisely, a list is either the empty list null, or it is a pair
     whose first element is a list element and whose second element is
     a list. The list? predicate recognizes lists. The null? predicate
     recognizes the empty list. (*Fuck this recursive definition)*
   - Pairs are immutable (contrary to Lisp tradition), and pair? and
     list? recognize immutable pairs and lists, only. The mcons
     procedure creates a mutable pair, which works with set- mcar! and
     set-mcdr!, as well as mcar and mcdr. A mutable pair prints using
     mcons, while write and display print mutable pairs with { and }.
   - When allocating extra lists seems too expensive, consider using
     looping forms like for/fold, which recognize vectors as well as
     lists.
   - The hash, hasheqv, and hasheq functions create immutable hash
     tables from an initial set of keys and values, in which each
     value is provided as an argument after its key. Immutable hash
     tables can be extended with hash-set, which produces a new
     immutable hash table in constant time.
   - A literal immutable hash table can be written as an expression by
     using #hash (for an equal?-based table), #hasheqv (for an
     eqv?-based table), or #hasheq (for an eq?-based table). A
     parenthesized sequence must immediately follow #hash, #hasheq, or
     #hasheqv, where each element is a dotted key–value pair.
   - Beware that even a weak hash table retains its values strongly,
     as long as the corresponding key is accessible. This creates a
     catch-22 dependency when a value refers back to its key, so that
     the mapping is retained permanently. To break the cycle, map the
     key to an ephemeron that pairs the value with its key (in
     addition to the implicit pairing of the hash table).
   -

** Expressions and Definitions
   - Forms like define, lambda, and let associate a meaning with one
     or more identifiers; that is, they bind identifiers. The part of
     the program for which the binding applies is the scope of the
     binding. The set of bindings in effect for a given expression is
     the expression’s environment.
   - As a convenience, the apply function accepts additional arguments
     between the function and the list. The additional arguments are
     effectively consed onto the argument list.
   - Instead of just an identifier, an argument (other than a rest
     argument) in a lambda form can be specified with an identifier
     and a default value.
   - The function supplied to make-keyword-procedure receives keyword
     arguments through parallel lists in the first two (by-position)
     arguments, and then all by-position arguments from an
     application as the remaining by-position arguments.
   - In a sense, make-add-suffix is a function takes two arguments,
     but it takes them one at a time. A function that takes some of
     its arguments and returns a function to consume more is sometimes
     called a curried function.
   - Internal definitions in a particular body sequence are mutually
     recursive; that is, any definition can refer to any other
     definition—as long as the reference isn’t actually evaluated
     before its definition takes place. If a definition is referenced
     too early, an error occurs.
   - Although using set! is sometimes appropriate, Racket style
     generally discourages the use of set!. 
     - As in any modern language, assigning to a shared identifier is
       no substitute for passing an argument to a procedure or
       getting its result.
     - A sequence of assignments to a local variable is far inferior
       to nested bindings.
     - Using assignment to accumulate results from an iteration is bad
       style. Accumulating through a loop argument is better.
     - For cases where stateful objects are necessary or appropriate,
       then implementing the object’s state with set! is fine.
   - All else being equal, a program that uses no assignments or
     mutation is always preferable to one that uses assignments or
     mutation. While side effects are to be avoided, however, they
     should be used if the resulting code is significantly more
     readable or if it implements a significantly better algorithm.
   - The quote form is rarely used for a datum that is a boolean,
     number, or string by itself, since the printed forms of those
     values can already be used as constants. The quote form is more
     typically used for symbols and lists, which have other meanings
     (identifiers, function calls, etc.) when not quoted.
   - If a quasiquote form appears within an enclosing quasiquote form,
     then the inner quasiquote effectively cancels one layer of
     unquote and unquote-splicing forms, so that a second unquote or
     unquote-splicing is needed.
   - In a parameterize form, each parameter-expr must produce a
     parameter. During the evaluation of the bodys, each specified
     parameter is given the result of the corresponding value-expr
     . When control leaves the parameterize form—either through a
     normal re- turn, an exception, or some other escape—the parameter
     reverts to its earlier value.
   - Parameters, however, offer several crucial advantages over set!:
     - The parameterize form helps automatically reset the value of a
       parameter when control escapes due to an exception. Adding
       exception handlers and other forms to rewind a set! is
       relatively tedious.
     - Parameters work nicely with tail calls (see §2.3.3 “Tail
       Recursion”). The last body in a parameterize form is in tail
       position with respect to the parameterize form.
     - Parameters work properly with threads (see §11.1
       “Threads”). The parameterize form adjusts the value of a
       parameter only for evaluation in the current thread, which
       avoids race conditions with other threads. (The reference is
       the good old *Racket Guide*.)

** Programmer-Defined Datatypes
   - A struct form places no constraints on the kinds of values that
     can appear for fields in an instance of the structure type. For
     example, (posn "apple" #f) produces an instance of posn, even
     though "apple" and #f are not valid coordinates for the obvious
     uses of posn instances. Enforcing constraints on field values,
     such as requiring them to be numbers, is normally the job of a
     contract, as discussed later in §7 “Contracts”.
   - An instance of a transparent structure type prints like a call to
     the constructor, so that it shows the structures field values. A
     transparent structure type also allows reflective operations,
     such as struct? and struct-info, to be used on its instances (see
     §15 “Reflection and Dynamic Evaluation”).
   - Structure types are opaque by default, because opaque structure
     instances provide more encapsulation guarantees. That is, a
     library can use an opaque structure to encapsulate data, and
     clients of the library cannot manipulate the data in the
     structure except as allowed by the library.
   - Overall, the different options for structure types offer a
     spectrum of possibilities from more abstract to more convenient:
     - Opaque (the default) : Instances cannot be inspected or forged
       without access to the structure-type declaration.
     - Transparent : Anyone can inspect or create an instance without
       access to the structure- type declaration, which means that the
       value printer can show the content of an in- stance.
     - Prefab : Anyone can inspect or create an instance at any time,
       without prior access to a structure-type declaration or an
       example instance.
      -

** Modules
   - For this chapter, please refer to the guide itself.
   - The Racket installation’s "collects" directory, however, is only
        one place that require looks for collection directories. Other
        places include the user-specific directory reported by
        (find-user-collects-dir) and directories configured through the
        PLTCOLLECTS search path. Finally, and most typically, collections
        are found through installed packages.
     - Unless otherwise specified, a module that is documented as a
       “language” using the #lang notation will expand to module in the
       same way as #lang racket. The documented language name can be
       used directly with module or require, too.
     - Consequently, re-declaration of a module is not generally
       allowed. For file-based modules, simply changing the file does
       not lead to a re-declaration in any case, because file-based
       modules are loaded on demand, and the previously loaded
       declarations satisfy future re- quests. It is possible to use
       Racket’s reflection support to re-declare a module, however, and
       non-file modules can be re-declared in the REPL; in such cases,
       the re-declaration may fail if it involves the re-definition of a
       previously constant binding.

** Contracts
#   - In harmony we trust.
   - Like a contract between two business partners, a software
     contract is an agreement between two parties. The agreement
     specifies obligations and guarantees for each “product” (or
     value) that is handed from one party to the other.
   - If a Racket S-expression contains two dots with a symbol in the
     middle, the reader re- arranges the S-expression and place the
     symbol at the front, as described in §2.4.3 “Lists and Racket
     Syntax”.
   - The any contract used for deposit matches any kind of result, and
     it can only be used in the range position of a function
     contract. Instead of any above, we could use the more specific
     contract void?, which says that the function will always return
     the (void) value. The void? contract, however, would require the
     contract monitoring system to check the return value every time
     the function is called, even though the “client” module can’t do
     much with the value. In contrast, any tells the monitoring system
     not to check the return value, it tells a potential client that
     the “server” module makes no promises at all about the function’s
     return value, even whether it is a single value or multiple
     values.
   - Note that if a default value does not satisfy a contract, you
     won’t get a contract error for this interface. If you can’t trust
     yourself to get the initial value right, you need to communicate
     the initial value across a boundary.
   - Note that such considerations don’t apply to the world of
     first-order contracts. Only a higher- order (or lazy) language
     forces the programmer to express contracts with such precision.
   -

** Input and Output
   - As noted throughout §3 “Built-In Datatypes”, Racket provides
     three ways to print an instance of a built-in value:
     - print, which prints a value in the same way that is it printed
       for a REPL result
     - write, which prints a value in such a way that read on the
       output produces the value back
     - display, which tends to reduce a value to just its character or
       byte content—at least for those datatypes that are primarily
       about characters or bytes, otherwise it falls back to the same
       output as write.
   - Functions like read-line, read, display, and write all work in
     terms of characters (which correspond to Unicode scalar
     values). Conceptually, they are implemented in terms of read-char
     and write-char.
   - In fact, the read-char and write-char functions are conceptually
     implemented in terms of read-byte and write-byte. When a single
     byte’s value is less than 128, then it corre- sponds to an ASCII
     character. Any other byte is treated as part of a UTF-8 sequence,
     where UTF-8 is a particular standard way of encoding Unicode
     scalar values in bytes (which has the nice property that ASCII
     characters are encoded as themselves). Thus, a single read- char
     may call read-byte multiple times, and a single write-char may
     generate multiple output bytes.
   -

** Regular Expressions
   - 













































 
